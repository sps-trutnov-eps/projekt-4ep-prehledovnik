<!DOCTYPE html>
<%- include('../partials/head'); %>
<style>
    .grid-container {
      display: grid;
      grid-template-columns: repeat(6, minmax(150px, 1fr));
      padding: 20px;
    }
    .grid-item {
        border: 1px solid rgba(0, 0, 0, 0.8); 
        border-collapse: collapse;
        font-size: 20px;
        text-align: center;
        scroll-margin: 75px;
        margin: 0;
        height: 120px;
        padding: 1px;
    }

    #naAktualniButton {
        margin-right: 2em; /* odsazení od tlačítka "Na aktuální"  */
        border-radius: var(--pico-border-radius);
    }
    #naMesicButon {
        border-top-left-radius: var(--pico-border-radius);
        border-bottom-left-radius: var(--pico-border-radius);
    }

    .days-header {
        position: sticky;
        top: -1em;
        z-index: 9;
        padding-bottom: 0;
        margin: 0;
        background-color: var(--pico-card-background-color);
        
        

        p.week-days { 
            color: #0172ad;
            position: relative; /* Ensure positioning context */
            background-color: var(--pico-background-color);
            box-shadow: /* Still WIP */
                0rem 0.029rem 0.174rem rgba(129, 145, 181, 0.01698), 
                0rem 0.067rem 0.402rem rgba(129, 145, 181, 0.024), 
                0rem 0.125rem 0.75rem rgba(129, 145, 181, 0.03), 
                0rem 0.225rem 1.35rem rgba(129, 145, 181, 0.036), 
                0rem 0.417rem 2.502rem rgba(129, 145, 181, 0.04302), 
                0rem 1rem 6rem rgba(129, 145, 181, 0.06);
            margin: 0; /* Prevent extra spacing */
            padding: 10px 5px; /* Optional: Adjust padding for better visual fit */
        }
    }

    #quick-nav {
        position: sticky;
        top: 0;
        z-index: 10;
        margin-top: 0;
        padding: 15px;
    }
    /* Fromát dnů v kalendáři */
    .days-mon {
        padding: 0;
        font-size: 13px;
        font-weight: bold;
        margin: 0;
        color: #0172ad;
    }
    
    .udalost {
        width: 100%;
        padding: 0;
        margin: 0;
        margin-top: -10px;
        border-radius: 0;
        height: 20px;
        font-size: 10px;
        
        padding-block: 0px;
        padding-inline: 0px;
        line-height: 1;
    }
    .week-days {
        height: 50px;
        font-weight: 600;
    }
    /*----------------*/
    /* #detail {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 400px;
        background-color: var(--pico-card-background-color);
        border-radius: 8px;
        padding: 24px;
        padding-bottom: 80px;
        z-index: 1000;
        text-align: center;
    }
 */
    .detailItem {
        font-weight: bold;
        margin: 12px 0;
        padding: 8px 0;
        /*color: #333;*/
    }

    .detailItem::before {
        display: block;
        /*color: #666;*/
        margin-bottom: 4px;
    }

    #from::before { content: "Začátek:"; }
    #to::before { content: "Konec:"; }
    #date::before { content: "Datum:"; }
    #type::before { content: "Typ události:"; }
    #tykase::before { content: "Týká se:"; }
    #note::before { content: "Poznámka:"; }

    #note {
        margin-bottom: 60px;
    }

    /* .detailButton {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #ff4444;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 24px;
        font-weight: bold;
        padding: 8px 40px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .detailButton:hover {
        background-color: #ff0000;
    } */

    /* Dark mode */
    @media (prefers-color-scheme: dark) {
        #detail {
            background-color: #1a1a1a;
        }

        .detailItem {
            color: #e0e0e0;
        }

        .detailItem::before {
            color: #999;
        }
    }
    
    header {
        display: flex;
    }
    
    header > div:nth-of-type(1) {
        flex: 1;
        text-align: left;
    }
    header > div:nth-of-type(2) {
        flex: 1;
        display: flex;
        justify-content: center;
    }
    header > div:nth-of-type(3) {
        flex: 1;
    }
    
    #rightSide > button {
        margin-left: 16em;
    }
    #months {
        margin: 0;
        padding: 0;
        padding-left: 0.6em;
    }
</style>

<article style="flex: 3; padding: 0;">
    <header>
        <div><h1>Kalendář</h1></div>
        <div>
            <button id="naAktualniButton" onclick="scrollToCurrent()">Aktuální</button>
            <div role="group">
                <button id="naMesicButon" onclick="scrollToMonth()">Na&nbsp;měsíc</button>
                <select name="months" id="months">
                    <option value="8">Srpen</option>
                    <option value="9">Září</option>
                    <option value="10">Říjen</option>
                    <option value="11">Listopad</option>
                    <option value="12">Prosinec</option>
                    <option value="1">Leden</option>
                    <option value="2">Únor</option>
                    <option value="3">Březen</option>
                    <option value="4">Duben</option>
                    <option value="5">Květen</option>
                    <option value="6">Červen</option>
                    <option value="7">Červenec</option>
                </select>
            </div>
        </div>
        <div>
            <div role="group" id="rightSide">
                <button class="outline" onclick="window.location.href='/kalendar/mesicni'">
                    Na měsíční
                </button>
            </div>
        </div>
    </header>

    <main>
        <section class="grid-container days-header">
            <p class="grid-item week-days">PONDĚLÍ</p>
            <p class="grid-item week-days">ÚTERÝ</p>
            <p class="grid-item week-days">STŘEDA</p>
            <p class="grid-item week-days">ČTVRTEK</p>
            <p class="grid-item week-days">PÁTEK</p>
            <p class="grid-item week-days">VÍKEND</p>
        </section>

        <section class="grid-container">
            <% struktury.forEach(den => { %>
                <section id="<%= den.datumISO %>" 
                         class="grid-item <%= den.lichySud %>">
                    <p class="days-mon"><%= den.datum %></p>
        
                    <% den.udalosti.forEach(udalost => { %>
                        <button class="udalost" 
                                data-target="detail" 
                                onclick="detailDisplay('<%= JSON.stringify(udalost).replace(/"/g, '&quot;') %>', event)">
                            <%= udalost.nazev %>
                        </button>
                    <% }); %>
        
                    <% if (den.hodiny.length > 0) { %>
                        <button class="udalost">Výuka</button>
                    <% } %>
                </section>
            <% }); %>
        </section>
    </main>
</article>


<dialog id="detail">
    <article>
      <header>
        <button
          aria-label="Close"
          rel="prev"
          data-target="detail"
          onclick="toggleModal(event)"
        ></button>
        <p><strong>Confirm your action!</strong></p>
      </header>
      <main>
        <p id="name" class="detailItem"></p>
        <p id="date" class="detailItem"></p>
        <p id="from" class="detailItem"></p>
        <p id="to" class="detailItem"></p>
        <p id="type" class="detailItem"></p>
        <p id="tykase" class="detailItem"></p>
        <p id="note" class="detailItem"></p>
      </main>
    </article>
</dialog>

<script>

    const dateIncrement = 24 * 60 * 60 * 1000 //Miliseconds per day
    const detailUdalosti = {}

  function scrollToCurrent() {
      const increment = 24 * 60 * 60 * 1000
      let today = new Date();
      //Pokud je nedele, scrolluje se na sobotu
      if(Number(today.getDay()) == 0)
          today = new Date(Number(today.getTime()) - increment)
      let currentDate = today.toISOString().split('T')[0]; // Format YYYY-MM-DD
      let element = document.getElementById(currentDate);

      if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
          console.error("Element pro aktuální datum nebyl nalezen.");
      }
  }

  function scrollToMonth() {

      const select = document.getElementById("months");
      const month = select.value;
      const year = (month < 8) ? 2025 : 2024;  // Nastavení roku podle výběru měsíce
      let selected = document.getElementById(`${year}-${month.padStart(2, '0')}-01`);

      if (selected) {
          selected.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
          selected = document.getElementById(`${year}-${month.padStart(2, '0')}-02`);
          selected.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
  }

  function placeUdalost(udalost, index){
    const increment = 24 * 60 * 60 * 1000
    let date = udalost.datum
    const dateCheck = new Date(udalost.datum)
    if (Number(dateCheck.getDay()) == 0)
        date = new Date(Number(dateCheck.getTime()) - increment).toLocaleDateString('en-CA', { timeZone: 'Europe/Prague' })
    let day = document.getElementById(date)
    let button = document.createElement("button")
    button.textContent = udalost.nazev
    button.className = "udalost"
    button.setAttribute("data-target", "detail")
    button.onclick = function(){detailDisplay(index, event)}
    day.appendChild(button)
    return button
  }

  function detailDisplay(udalostJSON, event) {
    const udalost = JSON.parse(udalostJSON);
    
    let detail = document.getElementById("detail");
    
    document.getElementById("name").innerText = udalost.nazev || '';
    document.getElementById("from").innerText = udalost.casOd || '';
    document.getElementById("to").innerText = udalost.casDo || '';
    document.getElementById("date").innerText = udalost.datum || '';
    document.getElementById("type").innerText = udalost.typ || '';
    document.getElementById("tykase").innerText = udalost.tykaSe || '';
    document.getElementById("note").innerText = udalost.poznamka || '';
    
    toggleModal(event);
    }

// Odstraň funkci placeUdalosti(), protože události už jsou součástí struktury
// a jsou vykreslované přímo v EJS šabloně


  const isOpenClass = "modal-is-open";
  const openingClass = "modal-is-opening";
  const closingClass = "modal-is-closing";
  const scrollbarWidthCssVar = "--pico-scrollbar-width";
  const animationDuration = 400; // ms
  let visibleModal = null;


  const toggleModal = (event) => {
    event.preventDefault();
    const modal = document.getElementById(event.currentTarget.dataset.target);
    if (!modal) return;
    modal && (modal.open ? closeModal(modal) : openModal(modal));
    };

    // Open modal
    const openModal = (modal) => {
    const { documentElement: html } = document;
    const scrollbarWidth = getScrollbarWidth();
    if (scrollbarWidth) {
        html.style.setProperty(scrollbarWidthCssVar, `${scrollbarWidth}px`);
    }
    html.classList.add(isOpenClass, openingClass);
    setTimeout(() => {
        visibleModal = modal;
        html.classList.remove(openingClass);
    }, animationDuration);
    modal.showModal();
    };

    // Close modal
    const closeModal = (modal) => {
    visibleModal = null;
    const { documentElement: html } = document;
    html.classList.add(closingClass);
    setTimeout(() => {
        html.classList.remove(closingClass, isOpenClass);
        html.style.removeProperty(scrollbarWidthCssVar);
        modal.close();
    }, animationDuration);
    };

    // Close with a click outside
    document.addEventListener("click", (event) => {
    if (visibleModal === null) return;
    const modalContent = visibleModal.querySelector("article");
    const isClickInside = modalContent.contains(event.target);
    if (!isClickInside) {
        closeModal(visibleModal);
        event.stopPropagation();
    }
    });

    // Close with Esc key
    document.addEventListener("keydown", (event) => {
    if (event.key === "Escape" && visibleModal) {
        closeModal(visibleModal);
    }
    });

    // Get scrollbar width
    const getScrollbarWidth = () => {
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    return scrollbarWidth;
    };

    // Is scrollbar visible
    const isScrollbarVisible = () => {
    return document.body.scrollHeight > screen.height;
    };

</script>
<script src="/kalendar/js/main.js"></script>
<%- include('../partials/tail') %>
